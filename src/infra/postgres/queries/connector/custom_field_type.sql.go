// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: custom_field_type.sql

package connector

import (
	"context"
)

const deleteFromCustomFieldTypeByID = `-- name: DeleteFromCustomFieldTypeByID :exec
delete from custom_field_type where id = $1
`

func (q *Queries) DeleteFromCustomFieldTypeByID(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteFromCustomFieldTypeByID, id)
	return err
}

const insertIntoCustomFieldType = `-- name: InsertIntoCustomFieldType :one
insert into custom_field_type (id, name) values (default, $1)
returning id
`

func (q *Queries) InsertIntoCustomFieldType(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRowContext(ctx, insertIntoCustomFieldType, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const selectAllFromCustomFieldType = `-- name: SelectAllFromCustomFieldType :many

select id, name from custom_field_type
`

// custom_field_type
func (q *Queries) SelectAllFromCustomFieldType(ctx context.Context) ([]CustomFieldType, error) {
	rows, err := q.db.QueryContext(ctx, selectAllFromCustomFieldType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CustomFieldType
	for rows.Next() {
		var i CustomFieldType
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectCustomFieldTypeByID = `-- name: SelectCustomFieldTypeByID :one
select id, name from custom_field_type where id = $1
`

func (q *Queries) SelectCustomFieldTypeByID(ctx context.Context, id int32) (CustomFieldType, error) {
	row := q.db.QueryRowContext(ctx, selectCustomFieldTypeByID, id)
	var i CustomFieldType
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateCustomFieldTypeByID = `-- name: UpdateCustomFieldTypeByID :exec
update custom_field_type set name = $1 where id = $2
`

type UpdateCustomFieldTypeByIDParams struct {
	Name string
	ID   int32
}

func (q *Queries) UpdateCustomFieldTypeByID(ctx context.Context, arg UpdateCustomFieldTypeByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateCustomFieldTypeByID, arg.Name, arg.ID)
	return err
}
