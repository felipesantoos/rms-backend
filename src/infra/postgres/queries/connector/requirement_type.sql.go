// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: requirement_type.sql

package connector

import (
	"context"
)

const deleteFromRequirementTypeByID = `-- name: DeleteFromRequirementTypeByID :exec
delete from requirement_type where id = $1
`

func (q *Queries) DeleteFromRequirementTypeByID(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteFromRequirementTypeByID, id)
	return err
}

const insertIntoRequirementType = `-- name: InsertIntoRequirementType :one
insert into requirement_type (id, name) values (default, $1) returning id
`

func (q *Queries) InsertIntoRequirementType(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRowContext(ctx, insertIntoRequirementType, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const selectAllFromRequirementType = `-- name: SelectAllFromRequirementType :many

select id, name from requirement_type
`

// requirement_type
func (q *Queries) SelectAllFromRequirementType(ctx context.Context) ([]RequirementType, error) {
	rows, err := q.db.QueryContext(ctx, selectAllFromRequirementType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RequirementType
	for rows.Next() {
		var i RequirementType
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectFromRequirementTypeByID = `-- name: SelectFromRequirementTypeByID :one
select id, name from requirement_type where id = $1
`

func (q *Queries) SelectFromRequirementTypeByID(ctx context.Context, id int32) (RequirementType, error) {
	row := q.db.QueryRowContext(ctx, selectFromRequirementTypeByID, id)
	var i RequirementType
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateRequirementTypeByID = `-- name: UpdateRequirementTypeByID :exec
update requirement_type
set name = $1
where id = $2
`

type UpdateRequirementTypeByIDParams struct {
	Name string
	ID   int32
}

func (q *Queries) UpdateRequirementTypeByID(ctx context.Context, arg UpdateRequirementTypeByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateRequirementTypeByID, arg.Name, arg.ID)
	return err
}
