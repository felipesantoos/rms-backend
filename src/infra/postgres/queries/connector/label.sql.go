// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: label.sql

package connector

import (
	"context"
)

const deleteFromLabelByID = `-- name: DeleteFromLabelByID :exec
delete from label where id = $1
`

func (q *Queries) DeleteFromLabelByID(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteFromLabelByID, id)
	return err
}

const insertIntoLabel = `-- name: InsertIntoLabel :one
insert into label (id, name) values (default, $1) returning id
`

func (q *Queries) InsertIntoLabel(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRowContext(ctx, insertIntoLabel, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const selectAllFromLabel = `-- name: SelectAllFromLabel :many

select id, name from label
`

// label
func (q *Queries) SelectAllFromLabel(ctx context.Context) ([]Label, error) {
	rows, err := q.db.QueryContext(ctx, selectAllFromLabel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Label
	for rows.Next() {
		var i Label
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectLabelByID = `-- name: SelectLabelByID :one
select id, name from label where id = $1
`

func (q *Queries) SelectLabelByID(ctx context.Context, id int32) (Label, error) {
	row := q.db.QueryRowContext(ctx, selectLabelByID, id)
	var i Label
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateLabelByID = `-- name: UpdateLabelByID :exec
update label set name = $1 where id = $2
`

type UpdateLabelByIDParams struct {
	Name string
	ID   int32
}

func (q *Queries) UpdateLabelByID(ctx context.Context, arg UpdateLabelByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateLabelByID, arg.Name, arg.ID)
	return err
}
