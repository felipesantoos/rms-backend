// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: requirement_has_custom_field.sql

package connector

import (
	"context"
	"database/sql"
)

const deleteFromRequirementHasCustomFieldByRequirementIDAndCustomFieldID = `-- name: DeleteFromRequirementHasCustomFieldByRequirementIDAndCustomFieldID :exec
delete from requirement_has_custom_field
where requirement_id = $1 and custom_field_id = $2
`

type DeleteFromRequirementHasCustomFieldByRequirementIDAndCustomFieldIDParams struct {
	RequirementID int32
	CustomFieldID int32
}

func (q *Queries) DeleteFromRequirementHasCustomFieldByRequirementIDAndCustomFieldID(ctx context.Context, arg DeleteFromRequirementHasCustomFieldByRequirementIDAndCustomFieldIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteFromRequirementHasCustomFieldByRequirementIDAndCustomFieldID, arg.RequirementID, arg.CustomFieldID)
	return err
}

const insertIntoRequirementHasCustomField = `-- name: InsertIntoRequirementHasCustomField :exec
insert into requirement_has_custom_field (requirement_id, custom_field_id, value)
values ($1, $2, $3)
`

type InsertIntoRequirementHasCustomFieldParams struct {
	RequirementID int32
	CustomFieldID int32
	Value         sql.NullString
}

func (q *Queries) InsertIntoRequirementHasCustomField(ctx context.Context, arg InsertIntoRequirementHasCustomFieldParams) error {
	_, err := q.db.ExecContext(ctx, insertIntoRequirementHasCustomField, arg.RequirementID, arg.CustomFieldID, arg.Value)
	return err
}

const selectCustomFieldIDsAndValuesFromRequirementHasCustomFieldByRequirementID = `-- name: SelectCustomFieldIDsAndValuesFromRequirementHasCustomFieldByRequirementID :many

select custom_field_id, value
from requirement_has_custom_field
where requirement_id = $1
`

type SelectCustomFieldIDsAndValuesFromRequirementHasCustomFieldByRequirementIDRow struct {
	CustomFieldID int32
	Value         sql.NullString
}

// requirement_has_custom_field
func (q *Queries) SelectCustomFieldIDsAndValuesFromRequirementHasCustomFieldByRequirementID(ctx context.Context, requirementID int32) ([]SelectCustomFieldIDsAndValuesFromRequirementHasCustomFieldByRequirementIDRow, error) {
	rows, err := q.db.QueryContext(ctx, selectCustomFieldIDsAndValuesFromRequirementHasCustomFieldByRequirementID, requirementID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectCustomFieldIDsAndValuesFromRequirementHasCustomFieldByRequirementIDRow
	for rows.Next() {
		var i SelectCustomFieldIDsAndValuesFromRequirementHasCustomFieldByRequirementIDRow
		if err := rows.Scan(&i.CustomFieldID, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectValueFromRequirementHasCustomFieldByRequirementIDAndCustomFieldID = `-- name: SelectValueFromRequirementHasCustomFieldByRequirementIDAndCustomFieldID :one
select value from requirement_has_custom_field
where requirement_id = $1 and custom_field_id = $2
`

type SelectValueFromRequirementHasCustomFieldByRequirementIDAndCustomFieldIDParams struct {
	RequirementID int32
	CustomFieldID int32
}

func (q *Queries) SelectValueFromRequirementHasCustomFieldByRequirementIDAndCustomFieldID(ctx context.Context, arg SelectValueFromRequirementHasCustomFieldByRequirementIDAndCustomFieldIDParams) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, selectValueFromRequirementHasCustomFieldByRequirementIDAndCustomFieldID, arg.RequirementID, arg.CustomFieldID)
	var value sql.NullString
	err := row.Scan(&value)
	return value, err
}

const updateValueFromRequirementHasCustomFieldByRequirementIDAndCustomFieldID = `-- name: UpdateValueFromRequirementHasCustomFieldByRequirementIDAndCustomFieldID :exec
update requirement_has_custom_field
set value = $1
where requirement_id = $2 and custom_field_id = $3
`

type UpdateValueFromRequirementHasCustomFieldByRequirementIDAndCustomFieldIDParams struct {
	Value         sql.NullString
	RequirementID int32
	CustomFieldID int32
}

func (q *Queries) UpdateValueFromRequirementHasCustomFieldByRequirementIDAndCustomFieldID(ctx context.Context, arg UpdateValueFromRequirementHasCustomFieldByRequirementIDAndCustomFieldIDParams) error {
	_, err := q.db.ExecContext(ctx, updateValueFromRequirementHasCustomFieldByRequirementIDAndCustomFieldID, arg.Value, arg.RequirementID, arg.CustomFieldID)
	return err
}
