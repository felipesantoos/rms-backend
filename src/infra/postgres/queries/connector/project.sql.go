// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: project.sql

package connector

import (
	"context"
	"database/sql"
)

const deleteFromProjectByID = `-- name: DeleteFromProjectByID :exec
update project
set deleted_at = now()
where id = $1
`

func (q *Queries) DeleteFromProjectByID(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteFromProjectByID, id)
	return err
}

const insertIntoProject = `-- name: InsertIntoProject :one
insert into project (id, name, alias, description, is_active, created_at, updated_at, deleted_at)
values (default, $1, $2, $3, $4, now(), null, null)
returning id
`

type InsertIntoProjectParams struct {
	Name        string
	Alias       sql.NullString
	Description sql.NullString
	IsActive    sql.NullBool
}

func (q *Queries) InsertIntoProject(ctx context.Context, arg InsertIntoProjectParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, insertIntoProject,
		arg.Name,
		arg.Alias,
		arg.Description,
		arg.IsActive,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const selectAllFromProject = `-- name: SelectAllFromProject :many

select id, name, alias, description, is_active, created_at, updated_at, deleted_at from project
`

// project
func (q *Queries) SelectAllFromProject(ctx context.Context) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, selectAllFromProject)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Alias,
			&i.Description,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectProjectByID = `-- name: SelectProjectByID :one
select id, name, alias, description, is_active, created_at, updated_at, deleted_at from project where id = $1
`

func (q *Queries) SelectProjectByID(ctx context.Context, id int32) (Project, error) {
	row := q.db.QueryRowContext(ctx, selectProjectByID, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Alias,
		&i.Description,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateProjectByID = `-- name: UpdateProjectByID :exec
update project
set
    name = $1,
    alias = $2,
    description = $3,
    is_active = $4,
    updated_at = now()
where id = $5
`

type UpdateProjectByIDParams struct {
	Name        string
	Alias       sql.NullString
	Description sql.NullString
	IsActive    sql.NullBool
	ID          int32
}

func (q *Queries) UpdateProjectByID(ctx context.Context, arg UpdateProjectByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateProjectByID,
		arg.Name,
		arg.Alias,
		arg.Description,
		arg.IsActive,
		arg.ID,
	)
	return err
}
