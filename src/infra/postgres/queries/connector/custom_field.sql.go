// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: custom_field.sql

package connector

import (
	"context"
	"database/sql"
)

const deleteFromCustomFieldByID = `-- name: DeleteFromCustomFieldByID :exec
delete from custom_field where id = $1
`

func (q *Queries) DeleteFromCustomFieldByID(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteFromCustomFieldByID, id)
	return err
}

const insertIntoCustomField = `-- name: InsertIntoCustomField :one
insert into custom_field (id, name, description, type_id) values (default, $1, $2, $3)
returning id
`

type InsertIntoCustomFieldParams struct {
	Name        string
	Description sql.NullString
	TypeID      int32
}

func (q *Queries) InsertIntoCustomField(ctx context.Context, arg InsertIntoCustomFieldParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, insertIntoCustomField, arg.Name, arg.Description, arg.TypeID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const selectAllFromCustomField = `-- name: SelectAllFromCustomField :many

select id, name, description, type_id from custom_field
`

// custom_field
func (q *Queries) SelectAllFromCustomField(ctx context.Context) ([]CustomField, error) {
	rows, err := q.db.QueryContext(ctx, selectAllFromCustomField)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CustomField
	for rows.Next() {
		var i CustomField
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.TypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectCustomFieldByID = `-- name: SelectCustomFieldByID :one
select id, name, description, type_id from custom_field where id = $1
`

func (q *Queries) SelectCustomFieldByID(ctx context.Context, id int32) (CustomField, error) {
	row := q.db.QueryRowContext(ctx, selectCustomFieldByID, id)
	var i CustomField
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.TypeID,
	)
	return i, err
}

const updateCustomFieldByID = `-- name: UpdateCustomFieldByID :exec
update custom_field set name = $1, description = $2, type_id = $3 where id = $4
`

type UpdateCustomFieldByIDParams struct {
	Name        string
	Description sql.NullString
	TypeID      int32
	ID          int32
}

func (q *Queries) UpdateCustomFieldByID(ctx context.Context, arg UpdateCustomFieldByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateCustomFieldByID,
		arg.Name,
		arg.Description,
		arg.TypeID,
		arg.ID,
	)
	return err
}
