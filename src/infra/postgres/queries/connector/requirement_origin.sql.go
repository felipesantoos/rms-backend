// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: requirement_origin.sql

package connector

import (
	"context"
)

const deleteFromRequirementOriginByID = `-- name: DeleteFromRequirementOriginByID :exec
delete from requirement_origin where id = $1
`

func (q *Queries) DeleteFromRequirementOriginByID(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteFromRequirementOriginByID, id)
	return err
}

const insertIntoRequirementOrigin = `-- name: InsertIntoRequirementOrigin :one
insert into requirement_origin (id, name) values (default, $1) returning id
`

func (q *Queries) InsertIntoRequirementOrigin(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRowContext(ctx, insertIntoRequirementOrigin, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const selectAllFromRequirementOrigin = `-- name: SelectAllFromRequirementOrigin :many

select id, name from requirement_origin
`

// requirement_origin
func (q *Queries) SelectAllFromRequirementOrigin(ctx context.Context) ([]RequirementOrigin, error) {
	rows, err := q.db.QueryContext(ctx, selectAllFromRequirementOrigin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RequirementOrigin
	for rows.Next() {
		var i RequirementOrigin
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectRequirementOriginByID = `-- name: SelectRequirementOriginByID :one
select id, name from requirement_origin where id = $1
`

func (q *Queries) SelectRequirementOriginByID(ctx context.Context, id int32) (RequirementOrigin, error) {
	row := q.db.QueryRowContext(ctx, selectRequirementOriginByID, id)
	var i RequirementOrigin
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateRequirementOriginByID = `-- name: UpdateRequirementOriginByID :exec
update requirement_origin set name = $1 where id = $2
`

type UpdateRequirementOriginByIDParams struct {
	Name string
	ID   int32
}

func (q *Queries) UpdateRequirementOriginByID(ctx context.Context, arg UpdateRequirementOriginByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateRequirementOriginByID, arg.Name, arg.ID)
	return err
}
