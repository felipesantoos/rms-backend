// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: acceptance_criteria.sql

package connector

import (
	"context"
)

const deleteAcceptanceCriteriaByID = `-- name: DeleteAcceptanceCriteriaByID :exec
update acceptance_criteria
set deleted_at = now()
where id = $1
`

func (q *Queries) DeleteAcceptanceCriteriaByID(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAcceptanceCriteriaByID, id)
	return err
}

const insertIntoAcceptanceCriteria = `-- name: InsertIntoAcceptanceCriteria :one
insert into acceptance_criteria (id, requirement_id, created_at, updated_at, deleted_at)
values (default, $1, now(), null, null)
returning id
`

func (q *Queries) InsertIntoAcceptanceCriteria(ctx context.Context, requirementID int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, insertIntoAcceptanceCriteria, requirementID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const selectAcceptanceCriteriaByID = `-- name: SelectAcceptanceCriteriaByID :one
select id, requirement_id, created_at, updated_at, deleted_at from acceptance_criteria where id = $1
`

func (q *Queries) SelectAcceptanceCriteriaByID(ctx context.Context, id int32) (AcceptanceCriterium, error) {
	row := q.db.QueryRowContext(ctx, selectAcceptanceCriteriaByID, id)
	var i AcceptanceCriterium
	err := row.Scan(
		&i.ID,
		&i.RequirementID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const selectAllFromAcceptanceCriteria = `-- name: SelectAllFromAcceptanceCriteria :many

select id, requirement_id, created_at, updated_at, deleted_at from acceptance_criteria
`

// acceptance_criteria
func (q *Queries) SelectAllFromAcceptanceCriteria(ctx context.Context) ([]AcceptanceCriterium, error) {
	rows, err := q.db.QueryContext(ctx, selectAllFromAcceptanceCriteria)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AcceptanceCriterium
	for rows.Next() {
		var i AcceptanceCriterium
		if err := rows.Scan(
			&i.ID,
			&i.RequirementID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAcceptanceCriteriaByID = `-- name: UpdateAcceptanceCriteriaByID :exec
update acceptance_criteria
set
    requirement_id = $1,
    updated_at = now()
where id = $2
`

type UpdateAcceptanceCriteriaByIDParams struct {
	RequirementID int32
	ID            int32
}

func (q *Queries) UpdateAcceptanceCriteriaByID(ctx context.Context, arg UpdateAcceptanceCriteriaByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateAcceptanceCriteriaByID, arg.RequirementID, arg.ID)
	return err
}
