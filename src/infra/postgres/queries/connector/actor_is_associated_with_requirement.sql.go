// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: actor_is_associated_with_requirement.sql

package connector

import (
	"context"
)

const deleteFromActorIsAssociatedWithRequirementByActorIDAndRequirementID = `-- name: DeleteFromActorIsAssociatedWithRequirementByActorIDAndRequirementID :exec
delete from actor_is_associated_with_requirement where actor_id = $1 and requirement_id = $2
`

type DeleteFromActorIsAssociatedWithRequirementByActorIDAndRequirementIDParams struct {
	ActorID       int32
	RequirementID int32
}

func (q *Queries) DeleteFromActorIsAssociatedWithRequirementByActorIDAndRequirementID(ctx context.Context, arg DeleteFromActorIsAssociatedWithRequirementByActorIDAndRequirementIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteFromActorIsAssociatedWithRequirementByActorIDAndRequirementID, arg.ActorID, arg.RequirementID)
	return err
}

const insertIntoActorIsAssociatedWithRequirement = `-- name: InsertIntoActorIsAssociatedWithRequirement :exec
insert into actor_is_associated_with_requirement (actor_id, requirement_id) values ($1, $2)
`

type InsertIntoActorIsAssociatedWithRequirementParams struct {
	ActorID       int32
	RequirementID int32
}

func (q *Queries) InsertIntoActorIsAssociatedWithRequirement(ctx context.Context, arg InsertIntoActorIsAssociatedWithRequirementParams) error {
	_, err := q.db.ExecContext(ctx, insertIntoActorIsAssociatedWithRequirement, arg.ActorID, arg.RequirementID)
	return err
}

const selectActorIDFromActorIsAssociatedWithRequirementByRequirementID = `-- name: SelectActorIDFromActorIsAssociatedWithRequirementByRequirementID :many

select actor_id from actor_is_associated_with_requirement where requirement_id = $1
`

// actor_is_associated_with_requirement
func (q *Queries) SelectActorIDFromActorIsAssociatedWithRequirementByRequirementID(ctx context.Context, requirementID int32) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, selectActorIDFromActorIsAssociatedWithRequirementByRequirementID, requirementID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var actor_id int32
		if err := rows.Scan(&actor_id); err != nil {
			return nil, err
		}
		items = append(items, actor_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectRequirementIDFromActorIsAssociatedWithRequirementByActorID = `-- name: SelectRequirementIDFromActorIsAssociatedWithRequirementByActorID :many
select requirement_id from actor_is_associated_with_requirement where actor_id = $1
`

func (q *Queries) SelectRequirementIDFromActorIsAssociatedWithRequirementByActorID(ctx context.Context, actorID int32) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, selectRequirementIDFromActorIsAssociatedWithRequirementByActorID, actorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var requirement_id int32
		if err := rows.Scan(&requirement_id); err != nil {
			return nil, err
		}
		items = append(items, requirement_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
