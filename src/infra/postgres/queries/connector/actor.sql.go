// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: actor.sql

package connector

import (
	"context"
	"database/sql"
)

const deleteFromActorById = `-- name: DeleteFromActorById :exec
delete from actor where id = $1
`

func (q *Queries) DeleteFromActorById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteFromActorById, id)
	return err
}

const insertIntoActor = `-- name: InsertIntoActor :one
insert into actor (id, name, description)
values (default, $1, $2)
returning id
`

type InsertIntoActorParams struct {
	Name        string
	Description sql.NullString
}

func (q *Queries) InsertIntoActor(ctx context.Context, arg InsertIntoActorParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, insertIntoActor, arg.Name, arg.Description)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const selectAllFromActor = `-- name: SelectAllFromActor :many

select id, name, description from actor
`

// actor
func (q *Queries) SelectAllFromActor(ctx context.Context) ([]Actor, error) {
	rows, err := q.db.QueryContext(ctx, selectAllFromActor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Actor
	for rows.Next() {
		var i Actor
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectFromActorByID = `-- name: SelectFromActorByID :one
select id, name, description from actor where id = $1
`

func (q *Queries) SelectFromActorByID(ctx context.Context, id int32) (Actor, error) {
	row := q.db.QueryRowContext(ctx, selectFromActorByID, id)
	var i Actor
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const updateActorById = `-- name: UpdateActorById :exec
update actor set name = $1, description = $2 where id = $3
`

type UpdateActorByIdParams struct {
	Name        string
	Description sql.NullString
	ID          int32
}

func (q *Queries) UpdateActorById(ctx context.Context, arg UpdateActorByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateActorById, arg.Name, arg.Description, arg.ID)
	return err
}
