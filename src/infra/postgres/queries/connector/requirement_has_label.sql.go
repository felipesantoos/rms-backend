// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: requirement_has_label.sql

package connector

import (
	"context"
)

const deleteFromRequirementHasLabelByRequirementIDAndLabelID = `-- name: DeleteFromRequirementHasLabelByRequirementIDAndLabelID :exec
delete from requirement_has_label
where requirement_id = $1 and label_id = $2
`

type DeleteFromRequirementHasLabelByRequirementIDAndLabelIDParams struct {
	RequirementID int32
	LabelID       int32
}

func (q *Queries) DeleteFromRequirementHasLabelByRequirementIDAndLabelID(ctx context.Context, arg DeleteFromRequirementHasLabelByRequirementIDAndLabelIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteFromRequirementHasLabelByRequirementIDAndLabelID, arg.RequirementID, arg.LabelID)
	return err
}

const insertIntoRequirementHasLabel = `-- name: InsertIntoRequirementHasLabel :exec
insert into requirement_has_label (requirement_id, label_id)
values ($1, $2)
`

type InsertIntoRequirementHasLabelParams struct {
	RequirementID int32
	LabelID       int32
}

func (q *Queries) InsertIntoRequirementHasLabel(ctx context.Context, arg InsertIntoRequirementHasLabelParams) error {
	_, err := q.db.ExecContext(ctx, insertIntoRequirementHasLabel, arg.RequirementID, arg.LabelID)
	return err
}

const selectLabelIDFromRequirementHasLabelByRequirementID = `-- name: SelectLabelIDFromRequirementHasLabelByRequirementID :many

select label_id from requirement_has_label where requirement_id = $1
`

// requirement_has_label
func (q *Queries) SelectLabelIDFromRequirementHasLabelByRequirementID(ctx context.Context, requirementID int32) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, selectLabelIDFromRequirementHasLabelByRequirementID, requirementID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var label_id int32
		if err := rows.Scan(&label_id); err != nil {
			return nil, err
		}
		items = append(items, label_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectRequirementIDFromRequirementHasLabelByLabelID = `-- name: SelectRequirementIDFromRequirementHasLabelByLabelID :many
select requirement_id from requirement_has_label where label_id = $1
`

func (q *Queries) SelectRequirementIDFromRequirementHasLabelByLabelID(ctx context.Context, labelID int32) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, selectRequirementIDFromRequirementHasLabelByLabelID, labelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var requirement_id int32
		if err := rows.Scan(&requirement_id); err != nil {
			return nil, err
		}
		items = append(items, requirement_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
