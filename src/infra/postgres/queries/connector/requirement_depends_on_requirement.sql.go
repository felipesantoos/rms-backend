// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: requirement_depends_on_requirement.sql

package connector

import (
	"context"
)

const deleteFromRequirementDependsOnRequirementByDependentIDAndPrerequisiteID = `-- name: DeleteFromRequirementDependsOnRequirementByDependentIDAndPrerequisiteID :exec
delete from requirement_depends_on_requirement where dependent_id = $1 and prerequisite_id = $2
`

type DeleteFromRequirementDependsOnRequirementByDependentIDAndPrerequisiteIDParams struct {
	DependentID    int32
	PrerequisiteID int32
}

func (q *Queries) DeleteFromRequirementDependsOnRequirementByDependentIDAndPrerequisiteID(ctx context.Context, arg DeleteFromRequirementDependsOnRequirementByDependentIDAndPrerequisiteIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteFromRequirementDependsOnRequirementByDependentIDAndPrerequisiteID, arg.DependentID, arg.PrerequisiteID)
	return err
}

const insertIntoRequirementDependsOnRequirement = `-- name: InsertIntoRequirementDependsOnRequirement :exec
insert into requirement_depends_on_requirement (dependent_id, prerequisite_id) values ($1, $2)
`

type InsertIntoRequirementDependsOnRequirementParams struct {
	DependentID    int32
	PrerequisiteID int32
}

func (q *Queries) InsertIntoRequirementDependsOnRequirement(ctx context.Context, arg InsertIntoRequirementDependsOnRequirementParams) error {
	_, err := q.db.ExecContext(ctx, insertIntoRequirementDependsOnRequirement, arg.DependentID, arg.PrerequisiteID)
	return err
}

const selectDependentIDFromRequirementDependsOnRequirementByPrerequisiteID = `-- name: SelectDependentIDFromRequirementDependsOnRequirementByPrerequisiteID :many

select dependent_id from requirement_depends_on_requirement where prerequisite_id = $1
`

// requirement_depends_on_requirement
func (q *Queries) SelectDependentIDFromRequirementDependsOnRequirementByPrerequisiteID(ctx context.Context, prerequisiteID int32) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, selectDependentIDFromRequirementDependsOnRequirementByPrerequisiteID, prerequisiteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var dependent_id int32
		if err := rows.Scan(&dependent_id); err != nil {
			return nil, err
		}
		items = append(items, dependent_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectPrerequisiteIDFromRequirementDependsOnRequirementByDependentID = `-- name: SelectPrerequisiteIDFromRequirementDependsOnRequirementByDependentID :many
select prerequisite_id from requirement_depends_on_requirement where dependent_id = $1
`

func (q *Queries) SelectPrerequisiteIDFromRequirementDependsOnRequirementByDependentID(ctx context.Context, dependentID int32) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, selectPrerequisiteIDFromRequirementDependsOnRequirementByDependentID, dependentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var prerequisite_id int32
		if err := rows.Scan(&prerequisite_id); err != nil {
			return nil, err
		}
		items = append(items, prerequisite_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
