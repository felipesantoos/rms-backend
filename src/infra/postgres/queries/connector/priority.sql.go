// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: priority.sql

package connector

import (
	"context"
)

const deleteFromPriorityByID = `-- name: DeleteFromPriorityByID :exec
delete from priority where id = $1
`

func (q *Queries) DeleteFromPriorityByID(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteFromPriorityByID, id)
	return err
}

const insertIntoPriority = `-- name: InsertIntoPriority :one
insert into priority (id, level) values (default, $1) returning id
`

func (q *Queries) InsertIntoPriority(ctx context.Context, level string) (int32, error) {
	row := q.db.QueryRowContext(ctx, insertIntoPriority, level)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const selectAllFromPriority = `-- name: SelectAllFromPriority :many

select id, level from priority
`

// priority
func (q *Queries) SelectAllFromPriority(ctx context.Context) ([]Priority, error) {
	rows, err := q.db.QueryContext(ctx, selectAllFromPriority)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Priority
	for rows.Next() {
		var i Priority
		if err := rows.Scan(&i.ID, &i.Level); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectPriorityByID = `-- name: SelectPriorityByID :one
select id, level from priority where id = $1
`

func (q *Queries) SelectPriorityByID(ctx context.Context, id int32) (Priority, error) {
	row := q.db.QueryRowContext(ctx, selectPriorityByID, id)
	var i Priority
	err := row.Scan(&i.ID, &i.Level)
	return i, err
}

const updatePriorityByID = `-- name: UpdatePriorityByID :exec
update priority set level = $1 where id = $2
`

type UpdatePriorityByIDParams struct {
	Level string
	ID    int32
}

func (q *Queries) UpdatePriorityByID(ctx context.Context, arg UpdatePriorityByIDParams) error {
	_, err := q.db.ExecContext(ctx, updatePriorityByID, arg.Level, arg.ID)
	return err
}
